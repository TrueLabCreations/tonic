{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["// @ts-check\n\"use strict\"\n\ntype TLike = new (...args: any[]) => void\n\ntype TContent = string | Node | TonicTemplate\n\ninterface TAttr<K extends string = any, V = any> {\n  name: K\n  value: V\n}\n\ninterface TState {}\n\ntype TProps = Record<string, any>\n\ntype TRender<P extends TProps, K extends TNode> = (\n  html?: (strings: TemplateStringsArray, values: any[]) => TNode,\n  props?: P\n) => K\n\ntype TNode =\n  | string\n  | TonicTemplate\n  | Promise<TonicTemplate>\n  | AsyncGenerator<TonicTemplate>\n\nclass TonicTemplate {\n  isTonicTemplate = true\n  __children__?: any[]\n\n  constructor(\n    public rawText: string,\n    public templateStrings: TemplateStringsArray | null,\n    public unsafe: boolean\n  ) {}\n\n  public valueOf() {\n    return this.rawText\n  }\n  public toString() {\n    return this.rawText\n  }\n}\n\nabstract class Tonic<\n  P extends TProps = {},\n  S extends TState = {}\n> extends window.HTMLElement {\n  static isTonicTemplate = true\n  static _tags = \"\"\n  static _refIds: string[] = []\n  static _data: Record<string, any> = {}\n  static _states: Record<string, any> = {}\n  static _children: Record<string, any> = {}\n  static _reg: Record<string, CustomElementConstructor> = {}\n  static _stylesheetRegistry: (() => string)[] = []\n  static _index = 0\n  static SPREAD = /\\.\\.\\.\\s?(__\\w+__\\w+__)/g\n  static ESC = /[\"&'<>`/]/g\n  static AsyncFunctionGenerator = async function* () {}.constructor.name\n  static AsyncFunction = async function () {}.constructor.name\n  static MAP = {\n    '\"': \"&quot;\",\n    \"&\": \"&amp;\",\n    \"'\": \"&#x27;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    \"`\": \"&#x60;\",\n    \"/\": \"&#x2F;\",\n  }\n  static ssr = false\n  static nonce = Math.random().toString()\n\n  _id = \"\"\n  _source?: string\n  _state: S = {} as S\n  _props: P = {} as P\n  __props: TAttr[] = []\n  preventRenderOnReconnect = false\n  elements: Element[] = []\n  nodes: ChildNode[] = []\n  pendingReRender?: Promise<void> | null = null\n  root?: ShadowRoot | any\n\n  constructor() {\n    super()\n    const state = Tonic._states[super.id]\n    delete Tonic._states[super.id]\n    this._state = state || {}\n    this.preventRenderOnReconnect = false\n    this.elements = [...Array.from(this.children)]\n    ;(this.elements as any).__children__ = true\n    this.nodes = [...Array.from(this.childNodes)]\n    ;(this.nodes as any).__children__ = true\n    this._events()\n  }\n\n  static _createId() {\n    return `tonic${Tonic._index++}`\n  }\n\n  static _splitName(s: string) {\n    return s.match(/[A-Z][a-z0-9]*/g)!.join(\"-\")\n  }\n\n  static _normalizeAttrs<T extends { name: string; value: unknown }>(\n    o: T[],\n    x: Record<string, unknown> = {}\n  ) {\n    ;[...o].forEach((o) => (x[o.name] = o.value))\n    return x\n  }\n\n  private _checkId() {\n    const _id = super.id\n    if (!_id) {\n      const html = this.outerHTML.replace(this.innerHTML, \"...\")\n      throw new Error(`Component: ${html} has no id`)\n    }\n    return _id\n  }\n\n  private _events() {\n    const hp = Object.getOwnPropertyNames(window.HTMLElement.prototype)\n    for (const p of this.__props) {\n      if (hp.indexOf(\"on\" + p) === -1) continue\n      this.addEventListener(p as any, this)\n    }\n  }\n\n  private _prop(o: string | Record<string, unknown>) {\n    const id = this._id\n    const p = `__${id}__${Tonic._createId()}__`\n    Tonic._data[id] = Tonic._data[id] || {}\n    Tonic._data[id][p] = o\n    return p\n  }\n\n  private _placehold(r: Record<string, any>) {\n    const id = this._id\n    const ref = `placehold:${id}:${Tonic._createId()}__`\n    Tonic._children[id] = Tonic._children[id] || {}\n    Tonic._children[id][ref] = r\n    return ref\n  }\n\n  static match(el: Element | Record<string, any>, s: string) {\n    if (!el.matches) el = el.parentElement\n    return el.matches(s) ? el : el.closest(s)\n  }\n\n  static getPropertyNames(proto: Tonic | Element | Record<string, any>) {\n    const props = []\n    while (proto && proto !== Tonic.prototype) {\n      props.push(...Object.getOwnPropertyNames(proto))\n      proto = Object.getPrototypeOf(proto)\n    }\n    return props\n  }\n\n  static add(c: TLike): TLike\n  static add(c: Function, htmlName: string): Function\n  static add(c: TLike | Function, htmlName?: string) {\n    const name = c instanceof Tonic ? c.constructor.name : c.name\n\n    if (!htmlName) {\n      htmlName = Tonic._splitName(name).toLowerCase()\n    }\n\n    const hasValidName = htmlName && htmlName.length > 1\n\n    if (!hasValidName) {\n      throw Error(\"Mangling. https://bit.ly/2TkJ6zP\")\n    }\n\n    if (!Tonic.ssr && window.customElements.get(htmlName)) {\n      console.warn(`Replacing Tonic.add(${name}, '${htmlName}')`)\n    }\n\n    if (!(\"isTonicTemplate\" in c)) {\n      const tmp = {\n        [c.name]: class extends Tonic {},\n      }[c.name]\n      ;(tmp as any).prototype.render = c\n      c = tmp\n    }\n\n    ;(c as any).prototype.__props = Tonic.getPropertyNames((c as any).prototype)\n\n    Tonic._reg[htmlName] = c as CustomElementConstructor\n    Tonic._tags = Object.keys(Tonic._reg).join()\n    window.customElements.define(htmlName, c as CustomElementConstructor)\n\n    if (c instanceof Tonic && typeof c.stylesheet === \"function\") {\n      Tonic.registerStyles(c.stylesheet)\n    }\n\n    return c\n  }\n\n  static registerStyles(stylesheetFn: () => string) {\n    if (Tonic._stylesheetRegistry.includes(stylesheetFn)) return\n    Tonic._stylesheetRegistry.push(stylesheetFn)\n\n    const styleNode = document.createElement(\"style\")\n    if (Tonic.nonce) styleNode.setAttribute(\"nonce\", Tonic.nonce)\n    styleNode.appendChild(document.createTextNode(stylesheetFn()))\n    if (document.head) document.head.appendChild(styleNode)\n  }\n\n  static escape(s: string) {\n    return s.replace(Tonic.ESC, (c) => Tonic.MAP[c as keyof typeof Tonic.MAP])\n  }\n\n  static unsafeRawString(s: string, templateStrings: TemplateStringsArray) {\n    return new TonicTemplate(s, templateStrings, true)\n  }\n\n  private async _drainIterator(\n    target: Tonic<P, S> | ShadowRoot,\n    iterator: AsyncGenerator\n  ): Promise<void> {\n    const result = await iterator.next()\n    this._set(target, undefined, result.value)\n    if (result.done) return\n    return this._drainIterator(target, iterator)\n  }\n\n  private _set = (\n    target: Tonic<P, S> | ShadowRoot,\n    render: undefined | typeof this[\"render\"],\n    content: string = \"\"\n  ) => {\n    for (const node of Array.from(target.querySelectorAll(Tonic._tags))) {\n      if (!(node as any).isTonicComponent) continue\n\n      assertNodeIsTonic(node)\n\n      const id = node.getAttribute(\"id\")\n      if (!id || !Tonic._refIds.includes(id)) continue\n      Tonic._states[id] = node.state\n    }\n\n    if (render === undefined || render === null) {\n      this._apply(target, content)\n    } else if (render.constructor.name === Tonic.AsyncFunction) {\n      return (render as TRender<P, Promise<TonicTemplate>>)\n        .call(this, this.html, this.props)\n        .then((content: TContent) => this._apply(target, content))\n    } else if (render.constructor.name === Tonic.AsyncFunctionGenerator) {\n      return this._drainIterator(\n        target,\n        (render as TRender<P, AsyncGenerator<TonicTemplate>>).call(this)\n      )\n    } else if (render === null) {\n      this._apply(target, content)\n    } else if (render instanceof Function) {\n      this._apply(\n        target,\n        (render as TRender<P, TonicTemplate>).call(\n          this,\n          this.html,\n          this.props\n        ) || \"\"\n      )\n    }\n\n    return\n  }\n\n  private _apply(target: ShadowRoot | Tonic<P, S>, content: TContent) {\n    if (typeof content === \"string\") {\n      content = Tonic.escape(content)\n    } else if (content instanceof TonicTemplate) {\n      content = content.rawText\n    } else {\n      target.innerHTML = \"\"\n      target.appendChild(content.cloneNode(true))\n      return\n    }\n\n    assertContentIsString(content)\n\n    if (this.stylesheet) {\n      content = `<style nonce=${\n        Tonic.nonce || \"\"\n      }>${this.stylesheet()}</style>${content}`\n    }\n\n    target.innerHTML = content\n\n    if (this.styles) {\n      const styles = this.styles()\n      for (const node of Array.from(target.querySelectorAll(\"[styles]\"))) {\n        const nodeStyles = node.getAttribute(\"styles\")\n        if (!nodeStyles) continue\n        for (const s of nodeStyles.split(/\\s+/)) {\n          Object.assign((node as HTMLElement).style, styles[s.trim()])\n        }\n      }\n    }\n\n    const tChildren = Tonic._children[this._id] || {}\n\n    const walk = (\n      node: Node,\n      fn: (node: Node, children: Element[], id: string) => void\n    ) => {\n      if (node.nodeType === 3) {\n        const id = node.textContent?.trim() || \"\"\n        if (tChildren[id]) fn(node, tChildren[id], id)\n      }\n\n      const childNodes = node.childNodes\n      if (!childNodes) return\n\n      for (let i = 0; i < childNodes.length; i++) {\n        walk(childNodes[i], fn)\n      }\n    }\n\n    walk(target, (node, children, id) => {\n      for (const child of children) {\n        node.parentNode?.insertBefore(child, node)\n      }\n      delete Tonic._children[this._id][id]\n      node.parentNode?.removeChild(node)\n    })\n  }\n\n  protected dispatch(eventName: string, detail = null) {\n    const opts = { bubbles: true, detail }\n    this.dispatchEvent(new window.CustomEvent(eventName, opts))\n  }\n\n  protected html(strings: TemplateStringsArray, ...values: any[]): TNode {\n    const refs = (\n      o:\n        | Tonic\n        | HTMLElement\n        | SVGElement\n        | HTMLCollection\n        | NodeList\n        | NamedNodeMap\n        | boolean\n        | string\n        | null\n        | ((...args: any[]) => any)\n        | Record<string, any>\n        | any[]\n        | any\n    ) => {\n      if (o && \"__children__\" in o) return this._placehold(o)\n      if (o && \"isTonicTemplate\" in o) return o.rawText\n      switch (Object.prototype.toString.call(o)) {\n        case \"[object HTMLCollection]\":\n        case \"[object NodeList]\":\n          return this._placehold([...o])\n        case \"[object Array]\":\n          if ((o as any[]).every((x) => x.isTonicTemplate && !x.unsafe)) {\n            return new TonicTemplate(o.join(\"\\n\"), null, false)\n          }\n          return this._prop(o)\n        case \"[object Object]\":\n        case \"[object Function]\":\n          return this._prop(o)\n        case \"[object NamedNodeMap]\":\n          return this._prop(Tonic._normalizeAttrs(o))\n        case \"[object Number]\":\n          return `${o}__float`\n        case \"[object String]\":\n          return Tonic.escape(o)\n        case \"[object Boolean]\":\n          return `${o}__boolean`\n        case \"[object Null]\":\n          return `${o}__null`\n        case \"[object HTMLElement]\":\n          return this._placehold([o])\n      }\n      if (\n        typeof o === \"object\" &&\n        o &&\n        o.nodeType === 1 &&\n        typeof o.cloneNode === \"function\"\n      ) {\n        return this._placehold([o])\n      }\n      return o\n    }\n\n    const out = []\n    for (let i = 0; i < strings.length - 1; i++) {\n      out.push(strings[i], refs(values[i]))\n    }\n    out.push(strings[strings.length - 1])\n\n    const htmlStr = out.join(\"\").replace(Tonic.SPREAD, (_, p) => {\n      const o = Tonic._data[p.split(\"__\")[1]][p]\n      return Object.entries(o)\n        .map(([key, value]) => {\n          const k = key.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase()\n          if (value === true) return k\n          else if (value) return `${k}=\"${Tonic.escape(String(value))}\"`\n          else return \"\"\n        })\n        .filter(Boolean)\n        .join(\" \")\n    })\n    return new TonicTemplate(htmlStr, strings, false)\n  }\n\n  protected connectedCallback() {\n    this.root = this.shadowRoot || this // here for back compat\n\n    if (super.id && !Tonic._refIds.includes(super.id)) {\n      Tonic._refIds.push(super.id)\n    }\n\n    const cc = (s: string) => s.replace(/-(.)/g, (_, m) => m.toUpperCase())\n\n    for (const { name: _name, value } of Array.from(this.attributes)) {\n      const name = cc(_name) as keyof P\n      const p = value\n\n      this._props[name] = value as P[keyof P]\n\n      if (/__\\w+__\\w+__/.test(p)) {\n        const { 1: root } = p.split(\"__\")\n        this._props[name] = Tonic._data[root][p]\n      } else if (/\\d+__float/.test(p)) {\n        this._props[name] = parseFloat(p) as P[keyof P]\n      } else if (p === \"null__null\") {\n        this._props[name] = null as P[keyof P]\n      } else if (/\\w+__boolean/.test(p)) {\n        this._props[name] = p.includes(\"true\") as P[keyof P]\n      } else if (/placehold:\\w+:\\w+__/.test(p)) {\n        const { 1: root } = p.split(\":\")\n        this._props[name] = Tonic._children[root][p][0]\n      }\n    }\n\n    this._props = Object.assign(\n      this.defaults ? this.defaults() : {},\n      this._props\n    )\n\n    this._id = this._id ?? Tonic._createId()\n\n    this.willConnect?.()\n\n    if (!this.isInDocument(this.root)) return\n\n    if (!this.preventRenderOnReconnect) {\n      if (!this._source) {\n        this._source = this.innerHTML\n      } else {\n        this.innerHTML = this._source\n      }\n\n      const p = this._set(this.root, this.render)\n      if (p && p.then) return p.then(() => this.connected?.())\n    }\n\n    this.connected && this.connected()\n    return\n  }\n\n  protected isInDocument(target: ShadowRoot | Tonic<P, S>) {\n    const root = target.getRootNode()\n    return root === document || root.toString() === \"[object ShadowRoot]\"\n  }\n\n  protected disconnectedCallback() {\n    this.disconnected?.()\n    delete Tonic._data[this._id]\n    delete Tonic._children[this._id]\n  }\n\n  protected scheduleReRender = (oldProps: P) => {\n    if (this.pendingReRender) return this.pendingReRender\n\n    this.pendingReRender = new Promise<void>((resolve) =>\n      setTimeout(() => {\n        if (!this.isInDocument(this.shadowRoot || this)) return\n        const p = this._set(this.shadowRoot || this, this.render)\n        this.pendingReRender = null\n\n        if (p && p.then) {\n          return p.then(() => {\n            this.updated?.(oldProps)\n            resolve()\n          })\n        }\n\n        this.updated && this.updated(oldProps)\n        resolve()\n        return\n      }, 0)\n    )\n\n    return this.pendingReRender\n  }\n\n  protected reRender = (o: P | ((oldProps: P) => P) = this.props) => {\n    const oldProps = { ...this.props }\n    this._props = typeof o === \"function\" ? o(oldProps) : o\n    return this.scheduleReRender(oldProps)\n  }\n\n  // Part of HTMLElement interface\n  handleEvent = (e: Event) => {\n    const handler = (this as any)[e.type] as (e: Event) => void\n    handler?.(e)\n  }\n\n  public defaults?(): Partial<P>\n\n  public styles?(): Record<string, any>\n\n  public connected?(): void\n\n  public disconnected?(): void\n\n  public willConnect?(): void\n\n  public stylesheet?(): string\n\n  public updated?(oldProps: P): void\n\n  public render?<P extends TProps>(\n    html?: (\n      strings: TemplateStringsArray,\n      values: TProps[keyof TProps][]\n    ) => any,\n    props?: P\n  ): TNode\n\n  public get props() {\n    return this._props\n  }\n\n  public get state() {\n    return this._checkId(), this._state\n  }\n\n  public set state(newState: S) {\n    this._state = (this._checkId(), newState)\n  }\n}\n\n// Tonic.prototype.isTonicComponent = true\n\n// Object.assign(Tonic, {\n//   _tags: \"\",\n//   _refIds: [],\n//   _data: {},\n//   _states: {},\n//   _children: {},\n//   _reg: {},\n//   _stylesheetRegistry: [],\n//   _index: 0,\n//   version: typeof require !== \"undefined\" ? require(\"./package\").version : null,\n//   SPREAD: /\\.\\.\\.\\s?(__\\w+__\\w+__)/g,\n//   ESC: /[\"&'<>`/]/g,\n//   AsyncFunctionGenerator: async function* () {}.constructor,\n//   AsyncFunction: async function () {}.constructor,\n//   MAP: {\n//     '\"': \"&quot;\",\n//     \"&\": \"&amp;\",\n//     \"'\": \"&#x27;\",\n//     \"<\": \"&lt;\",\n//     \">\": \"&gt;\",\n//     \"`\": \"&#x60;\",\n//     \"/\": \"&#x2F;\",\n//   },\n// })\n\nfunction assertContentIsString(content: TContent): asserts content is string {\n  if (typeof content !== \"string\") {\n    throw Error(\"content is not a string\")\n  }\n}\n\nfunction assertNodeIsTonic(node: Element | Tonic): asserts node is Tonic {\n  if (!(node as any).isTonicComponent) {\n    throw Error(\"node is not a tonic component\")\n  }\n}\n\nexport default Tonic\n"],
  "mappings": "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",
  "names": []
}
